<Project>
  <Import Project="common.props" />

  <PropertyGroup>
    <!-- Project for building the Runtime Store -->
    <MetaPackagePath>$(RepositoryRoot)src\Microsoft.AspNetCore.RuntimeStore\</MetaPackagePath>
    <MetaPackageFile>$(MetaPackagePath)Microsoft.AspNetCore.RuntimeStore.csproj</MetaPackageFile>

    <HostingStartupTemplatePath>$(RepositoryRoot)tools\Microsoft.AspNetCore.HostingStartup.Template\</HostingStartupTemplatePath>
    <HostingStartupTemplateFile>$(HostingStartupTemplatePath)Microsoft.AspNetCore.HostingStartup.Template.csproj</HostingStartupTemplateFile>

    <!-- Project for building the NuGet Fallback Archive (LZMA for CLI) -->
    <FallbackArchiveDir>$(RepositoryRoot)src\Archive.AspNetCore.All\</FallbackArchiveDir>
    <FallbackArchiveProj>$(FallbackArchiveDir)Archive.AspNetCore.All.csproj</FallbackArchiveProj>
    <ArchiverProject>$(RepositoryRoot)src\dotnet-archive\dotnet-archive.csproj</ArchiverProject>
    <ArchiverBinary>$(RepositoryRoot)src\dotnet-archive\bin\$(Configuration)\netcoreapp2.0\dotnet-archive.dll</ArchiverBinary>

    <!-- Determine ASP.NET Package Version -->
    <NoTimestampSuffix Condition="'$(TIMESTAMP_FREE_VERSION)' != ''">$(TIMESTAMP_FREE_VERSION)</NoTimestampSuffix>
    <NoTimestampSuffix Condition="'$(NoTimestampSuffix)' == ''">final</NoTimestampSuffix>

    <NoTimestampVersion>$(VersionPrefix)-$(OriginalVersionSuffix)-$(NoTimestampSuffix)</NoTimestampVersion>
    <TimestampVersion>$(VersionPrefix)-$(OriginalVersionSuffix)-$(BuildNumber)</TimestampVersion>

    <RuntimeStoreWorkingDirectory>$(RepositoryRoot).rw\</RuntimeStoreWorkingDirectory>
    <RuntimeStoreOutputPath>$(RepositoryRoot).ro\</RuntimeStoreOutputPath>
    <ArtifactsDir>$(RepositoryRoot)artifacts\</ArtifactsDir>
    <ArtifactsZipDir>$(ArtifactsDir)zip\</ArtifactsZipDir>
    <DepsOutputPath>$(ArtifactsDir)deps\</DepsOutputPath>
    <RuntimeStoreZipTimestampDir>$(ArtifactsZipDir)t\</RuntimeStoreZipTimestampDir>
    <RuntimeStoreZipNoTimestampDir>$(ArtifactsZipDir)n\</RuntimeStoreZipNoTimestampDir>
    <RuntimeStoreSymbolsZipTimestampDir>$(ArtifactsZipDir)st\</RuntimeStoreSymbolsZipTimestampDir>
    <RuntimeStoreSymbolsZipNoTimestampDir>$(ArtifactsZipDir)sn\</RuntimeStoreSymbolsZipNoTimestampDir>
    <RuntimeStoreInstallerDirectory>$(ArtifactsDir)installers\</RuntimeStoreInstallerDirectory>
    <RuntimeStoreInstallerLayoutTimestampDirectory>$(ArtifactsDir)itLayout\</RuntimeStoreInstallerLayoutTimestampDirectory>
    <RuntimeStoreInstallerLayoutPackageRootTimestampDirectory>$(RuntimeStoreInstallerLayoutTimestampDirectory)package_root\</RuntimeStoreInstallerLayoutPackageRootTimestampDirectory>
    <RuntimeStoreInstallerLayoutNoTimestampDirectory>$(ArtifactsDir)inLayout\</RuntimeStoreInstallerLayoutNoTimestampDirectory>
    <RuntimeStoreInstallerLayoutPackageRootNoTimestampDirectory>$(RuntimeStoreInstallerLayoutNoTimestampDirectory)package_root\</RuntimeStoreInstallerLayoutPackageRootNoTimestampDirectory>
    <RuntimeStoreInstallerOutputDirectory>$(ArtifactsDir)iOutput\</RuntimeStoreInstallerOutputDirectory>
    <TempDir>$(ArtifactsDir)temp\</TempDir>
    <ToolsDir>$(RepositoryRoot)tools\</ToolsDir>
    <DockerDir>$(ToolsDir)docker\</DockerDir>
    <DependencyBuildDirectory>$(RepositoryRoot).deps\build\</DependencyBuildDirectory>
    <RuntimeStoreReferenceDirectory>$(ToolsDir)Build.RuntimeStore.References\</RuntimeStoreReferenceDirectory>
    <RuntimeStoreReferencePackageDirectory>$(RuntimeStoreReferenceDirectory)bin\Release\</RuntimeStoreReferencePackageDirectory>
    <!-- Testing only -->
    <DebianConfigTemplateFile>$(ToolsDir)debian_config.json</DebianConfigTemplateFile>
    <DotnetDebToolDirectory>$(ToolsDir)dotnet-deb-tool-consumer\</DotnetDebToolDirectory>
    <BuildTempDirectory>$(RepositoryRoot).build\temp\</BuildTempDirectory>

    <PrepareDependsOn>
      $(PrepareDependsOn);
      UpdateNuGetConfig
    </PrepareDependsOn>

    <CLIBuildDll>$(ToolsDir)dotnet-cli-build\dotnet-cli-build.dll</CLIBuildDll>
  </PropertyGroup>
  
  <UsingTask TaskName="DotNetDebTool" AssemblyFile="$(CLIBuildDll)" />

  <Target Name="UpdateNuGetConfig">
    <UpdatePackageSource
      NuGetConfigPath="$(RepositoryRoot)NuGet.config"
      SourceName="Dependencies"
      SourceUri="$(DependencyBuildDirectory)"
      Condition="Exists('$(DependencyBuildDirectory)')" />
  </Target>

  <Target Name="BuildPackageCache" DependsOnTargets="UpdateNuGetConfig;AddDiaSymReaderToPath">
    <GetOSPlatform>
      <!-- Returns {Linux, macOS, Windows} -->
      <Output TaskParameter="PlatformName" PropertyName="OSPlatform" />
    </GetOSPlatform>

    <Error Text="Please specify the platform for the runtime package store via PACKAGE_CACHE_PLATFORM: {x64|x86}." Condition="'$(PACKAGE_CACHE_PLATFORM)' == ''"/>

    <!-- Display dotnet info -->
    <Exec Command="dotnet --info" />

    <PropertyGroup>
      <OutputZipSufix Condition="'$(OSPlatform)' == 'Windows'">win$(PACKAGE_CACHE_PLATFORM)</OutputZipSufix>
      <OutputZipSufix Condition="'$(OSPlatform)' == 'Linux'">linux</OutputZipSufix>
      <OutputZipSufix Condition="'$(OSPlatform)' == 'macOS'">osx</OutputZipSufix>
      <RID Condition="'$(OSPlatform)' == 'Windows'">win7-$(PACKAGE_CACHE_PLATFORM)</RID>
      <RID Condition="'$(OSPlatform)' == 'Linux'">linux-$(PACKAGE_CACHE_PLATFORM)</RID>
      <RID Condition="'$(OSPlatform)' == 'macOS'">osx-$(PACKAGE_CACHE_PLATFORM)</RID>

      <OutputZip>$(ArtifactsDir)Build.RS.$(OutputZipSufix)-$(VersionSuffix).zip</OutputZip>
      <OutputZipNoTimestamp>$(ArtifactsDir)Build.RS.$(OutputZipSufix).zip</OutputZipNoTimestamp>
      <OutputSymbolZip>$(ArtifactsDir)Build.Symbols.RS.$(OutputZipSufix)-$(VersionSuffix).zip</OutputSymbolZip>
      <OutputSymbolZipNoTimestamp>$(ArtifactsDir)Build.Symbols.RS.$(OutputZipSufix).zip</OutputSymbolZipNoTimestamp>
      <OutputSymbolTGZ>$(ArtifactsDir)Build.Symbols.RS.$(OutputZipSufix)-$(VersionSuffix).tar.gz</OutputSymbolTGZ>
      <OutputSymbolTGZNoTimeStamp>$(ArtifactsDir)Build.Symbols.RS.$(OutputZipSufix).tar.gz</OutputSymbolTGZNoTimeStamp>
    </PropertyGroup>

    <!-- Build reference package -->
    <Exec Command="dotnet restore" WorkingDirectory="$(RuntimeStoreReferenceDirectory)" />
    <MSBuild Projects="$(RuntimeStoreReferenceDirectory)\Build.RuntimeStore.References.csproj"
      Targets="Pack"
      Properties="Configuration=Release" />

    <UpdatePackageSource
      NuGetConfigPath="$(RepositoryRoot)NuGet.config"
      SourceName="RuntimeStoreReference"
      SourceUri="$(RuntimeStoreReferencePackageDirectory)"
      Condition="Exists('$(RuntimeStoreReferencePackageDirectory)')" />

    <!-- Build runtime store -->
    <RemoveDir Directories="$(RuntimeStoreOutputPath)" />
    <RemoveDir Directories="$(RuntimeStoreWorkingDirectory)" />

    <Exec Command="dotnet store -m $(MetaPackageFile) -f netcoreapp2.0 -r $(RID) -o $(RuntimeStoreOutputPath) --framework-version 2.0.0-* -w $(RuntimeStoreWorkingDirectory) $(RUNTIME_STORE_ADDITIONAL_ARGUMENTS)" />

    <!-- Create deps files for hosting startup -->
    <Exec Command="dotnet restore" WorkingDirectory="$(RepositoryRoot)tools\TrimDeps" />
    <Exec Command="dotnet restore" WorkingDirectory="$(HostingStartupTemplatePath)" />

    <!--- MSBuild caches things if you run inproc so have to use Exec -->
    <Exec Command="dotnet msbuild /t:&quot;Restore;Rebuild;CollectDeps&quot; $(HostingStartupTemplateFile) /p:&quot;DepsOutputPath=$(DepsOutputPath);HostingStartupPackageName=%(HostingStartupPackageReference.Identity);HostingStartupPackageVersion=%(Version)&quot;"/>

    <ItemGroup>
      <PackageStoreManifestFiles Include="$(RuntimeStoreOutputPath)**\artifact.xml">
        <TimestampDestinationFile>aspnetcore-store-$(TimestampVersion)-$(RID).xml</TimestampDestinationFile>
      </PackageStoreManifestFiles>
      <_RuntimeStoreFiles Include="$(RuntimeStoreOutputPath)**\*" Exclude="$(RuntimeStoreOutputPath)**\artifact.xml;$(RuntimeStoreOutputPath)symbols\**\*" />
      <RuntimeStoreFiles Include="@(_RuntimeStoreFiles)" >
        <NoTimestampRecursiveDir>$([System.String]::new('%(RecursiveDir)').Replace('-$(BuildNumber)', '-final'))</NoTimestampRecursiveDir>
      </RuntimeStoreFiles>
      <_RuntimeStoreSymbolFiles Include="$(RuntimeStoreOutputPath)symbols\**\*" />
      <RuntimeStoreSymbolFiles Include="@(_RuntimeStoreSymbolFiles )" >
        <NoTimestampRecursiveDir>$([System.String]::new('%(RecursiveDir)').Replace('-$(BuildNumber)', '-final'))</NoTimestampRecursiveDir>
      </RuntimeStoreSymbolFiles>
      <DepsFiles Include="$(DepsOutputPath)**\*" />
    </ItemGroup>

    <Move SourceFiles="%(PackageStoreManifestFiles.FullPath)" DestinationFiles="$(ArtifactsDir)%(PackageStoreManifestFiles.TimestampDestinationFile)" />

    <Copy SourceFiles="@(DepsFiles)" DestinationFolder="$(RuntimeStoreZipTimestampDir)additionalDeps\%(RecursiveDir)" />
    <Copy SourceFiles="@(DepsFiles)" DestinationFolder="$(RuntimeStoreZipNoTimestampDir)additionalDeps\%(RecursiveDir)" />
    <Copy SourceFiles="@(RuntimeStoreFiles)" DestinationFolder="$(RuntimeStoreZipTimestampDir)store\%(RecursiveDir)" />
    <Copy SourceFiles="@(RuntimeStoreFiles)" DestinationFiles="$(RuntimeStoreZipNoTimestampDir)store\%(RuntimeStoreFiles.NoTimestampRecursiveDir)%(RuntimeStoreFiles.FileName)%(RuntimeStoreFiles.Extension)" />
    <Copy SourceFiles="@(RuntimeStoreSymbolFiles)" DestinationFolder="$(RuntimeStoreSymbolsZipTimestampDir)%(RecursiveDir)" />
    <Copy SourceFiles="@(RuntimeStoreSymbolFiles)" DestinationFiles="$(RuntimeStoreSymbolsZipNoTimestampDir)%(RuntimeStoreSymbolFiles.NoTimestampRecursiveDir)%(RuntimeStoreSymbolFiles.FileName)%(RuntimeStoreSymbolFiles.Extension)" />

    <ItemGroup>
      <NoTimestampDepsFiles Include="$(RuntimeStoreZipNoTimestampDir)additionalDeps\**\*"/>
    </ItemGroup>

    <MSBuild Projects="$(ProjectPath)" Targets="_RemoveTimestampFromDepsFile" Properties="DepsFile=%(NoTimestampDepsFiles.FullPath)" />

    <ItemGroup>
      <OutputZipFiles Include="$(RuntimeStoreZipTimestampDir)**\*" />
      <OutputZipFilesNoTimestamp Include="$(RuntimeStoreZipNoTimestampDir)**\*" />
      <OutputSymbolZipFiles Include="$(RuntimeStoreSymbolsZipTimestampDir)**\*" />
      <OutputSymbolZipFilesNoTimestamp Include="$(RuntimeStoreSymbolsZipNoTimestampDir)**\*" />
    </ItemGroup>

    <ZipArchive File="$(OutputZip)" SourceFiles="@(OutputZipFiles)" WorkingDirectory="$(RuntimeStoreZipTimestampDir)" Overwrite="true"/>
    <ZipArchive File="$(OutputZipNoTimeStamp)" SourceFiles="@(OutputZipFilesNoTimestamp)" WorkingDirectory="$(RuntimeStoreZipNoTimestampDir)" Overwrite="true"/>
    <ZipArchive File="$(OutputSymbolZip)" SourceFiles="@(OutputSymbolZipFiles)" WorkingDirectory="$(RuntimeStoreSymbolsZipTimestampDir)" Overwrite="true" Condition="'@(OutputSymbolZipFiles)' != ''"/>
    <ZipArchive File="$(OutputSymbolZipNoTimeStamp)" SourceFiles="@(OutputSymbolZipFilesNoTimestamp)" WorkingDirectory="$(RuntimeStoreSymbolsZipNoTimestampDir)" Overwrite="true" Condition="'@(OutputSymbolZipFilesNoTimestamp)' != ''"/>

    <MSBuild Projects="$(ProjectPath)" Targets="ConvertZipToTGZ" Properties="ZipFileName=$(OutputSymbolZip);TGZFileName=$(OutputSymbolTGZ)" Condition="'$(OSPlatform)' == 'Linux'"/>
    <MSBuild Projects="$(ProjectPath)" Targets="ConvertZipToTGZ" Properties="ZipFileName=$(OutputSymbolZipNoTimeStamp);TGZFileName=$(OutputSymbolTGZNoTimeStamp)" Condition="'$(OSPlatform)' == 'Linux'"/>

    <!--Drop a nuspec file in artifacts for packing zip files into a nupkg-->
    <Copy SourceFiles="$(RepositoryRoot)build\Build.RS.nuspec" DestinationFolder="$(ArtifactsDir)" Condition="'$(OSPlatform)'=='Linux'" />
    <WriteLinesToFile File="$(ArtifactsDir)version.txt" Lines="$(VersionPrefix)-$(VersionSuffix)" Overwrite="true" Condition="'$(OSPlatform)'=='Linux'" />
  </Target>

  <Target Name="ConvertZipToTGZ">
    <Exec Command="&quot;$(ToolsDir)zip2tgz.sh&quot; &quot;$(ZipFileName)&quot; &quot;$(TGZFileName)&quot;" />
    <Delete Files="$(ZipFileName)" />
  </Target>

  <Target Name="AddDiaSymReaderToPath" Condition="'$(OS)' == 'Windows_NT'" DependsOnTargets="_AddDiaSymReaderFromCurrentSharedFramework;_AddDiaSymReaderFromDownloadedSharedFramework" />

  <Target Name="_ResolveCurrentSharedFrameworkVersion">
    <!-- Parse framework version -->
    <Exec Command="powershell.exe $(ToolsDir)GetSharedFrameworkVersion.ps1" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="SharedFrameworkVersion" />
    </Exec>
  </Target>

  <Target Name="_AddDiaSymReaderFromCurrentSharedFramework" DependsOnTargets="_ResolveCurrentSharedFrameworkVersion" Condition="'$(PACKAGE_CACHE_PLATFORM)' == 'x64'">
    <GetDotNetHost>
      <Output TaskParameter="DotNetDirectory" PropertyName="DotnetHomeDirectory" />
    </GetDotNetHost>

    <PropertyGroup>
      <DiaSymReaderDirectory>$(DotnetHomeDirectory)shared\Microsoft.NETCore.App\$(SharedFrameworkVersion)</DiaSymReaderDirectory>
    </PropertyGroup>

    <Message Text="Adding DiaSymReader to PATH by appending: $(DiaSymReaderDirectory)" Importance="high" />

    <SetEnvironmentVariable Variable="PATH" Value="$(PATH);$(DiaSymReaderDirectory)" />
  </Target>

  <Target Name="_AddDiaSymReaderFromDownloadedSharedFramework" DependsOnTargets="_ResolveCurrentSharedFrameworkVersion" Condition="'$(PACKAGE_CACHE_PLATFORM)' == 'x86'">
    <Exec Command="powershell.exe $(ToolsDir)InstallSharedFrameworkx86.ps1 $(SharedFrameworkVersion) $(BuildTempDirectory)"/>

    <PropertyGroup>
      <DiaSymReaderDirectory>$(BuildTempDirectory)shared\Microsoft.NETCore.App\$(SharedFrameworkVersion)</DiaSymReaderDirectory>
    </PropertyGroup>

    <Message Text="Adding DiaSymReader to PATH by appending: $(DiaSymReaderDirectory)" Importance="high" />

    <SetEnvironmentVariable Variable="PATH" Value="$(PATH);$(DiaSymReaderDirectory)" />
  </Target>

  <Target Name="_RemoveTimestampFromDepsFile">
    <GetOSPlatform>
      <!-- Returns {Linux, macOS, Windows} -->
      <Output TaskParameter="PlatformName" PropertyName="OSPlatform" />
    </GetOSPlatform>

    <Exec Command="powershell.exe -command &quot;(Get-Content $(DepsFile)).replace('-$(BuildNumber)','-final') | Set-Content $(DepsFile)&quot;" Condition="'$(OSPlatform)'=='Windows'"/>
    <Exec Command="sed -i -e &quot;s/\-$(BuildNumber)/\-final/g&quot; $(DepsFile)" Condition="'$(OSPlatform)'=='macOS'"/>
    <Exec Command="sed -i -e &quot;s/\-$(BuildNumber)/\-final/g&quot; $(DepsFile)" Condition="'$(OSPlatform)'=='Linux'"/>
  </Target>

  <Target Name="_BuildFallbackArchive">
    <Error Text="AspNetPackageVersion must be specified" Condition=" '$(AspNetPackageVersion)' == '' " />
    <Error Text="PackageSource must be specified" Condition=" '$(PackageSource)' == '' " />
    <Error Text="OutputPackageName must be specified" Condition=" '$(OutputPackageName)' == '' " />
    <Error Text="ArchiverPath must be specified" Condition=" '$(ArchiverPath)' == '' " />
    <Error Text="Archiver not found at $(ArchiverPath)" Condition="!Exists('$(ArchiverPath)')" />

    <!-- Clear the directories -->
    <RemoveDir Directories="$(FallbackArchiveDir)bin" />
    <RemoveDir Directories="$(FallbackArchiveDir)obj" />

    <PropertyGroup>
      <FallbackStagingDir>$(FallbackArchiveDir)obj/$(OutputPackageName)</FallbackStagingDir>
      <FallbackOutputArchive>$(RepositoryRoot)artifacts\$(OutputPackageName).lzma</FallbackOutputArchive>
      <FallbackRestoreConfigFile>$(FallbackArchiveDir)\obj\$(OutputPackageName).NuGet.config</FallbackRestoreConfigFile>
    </PropertyGroup>

    <!-- Create the Staging Dir -->
    <MakeDir Directories="$(FallbackStagingDir)" />

    <!-- Copy the NuGet.config from this repo and update it with the Package Source -->
    <Copy SourceFiles="$(RepositoryRoot)NuGet.config" DestinationFiles="$(FallbackRestoreConfigFile)" />
    <UpdatePackageSource
      NuGetConfigPath="$(FallbackRestoreConfigFile)"
      SourceName="Dependencies"
      SourceUri="$(PackageSource)" />

    <!-- Restore the target project -->
    <MSBuild Projects="$(FallbackArchiveProj)" Targets="Restore" Properties="RestorePackagesPath=$(FallbackStagingDir);AspNetPackageVersion=$(AspNetPackageVersion);RestoreConfigFile=$(FallbackRestoreConfigFile)" />

    <!-- Create the archive -->
    <Message Text="Producing LZMA Archive, this may take a while..." Importance="high" />
    <Exec Command="$(ArchiverPath) -a $(FallbackOutputArchive) $(FallbackStagingDir)" />
  </Target>

  <Target Name="BuildFallbackArchive">
    <!-- Validate Arguments -->
    <Error Text="COHERENCE_SIGNED_DROP_LOCATION is not specified. This requires a path like \\aspnetci\drops\Coherence-Signed\{branch}\{build-number}"
        Condition=" '$(COHERENCE_SIGNED_DROP_LOCATION)' == '' " />
    <Error Text="Required Property 'BuildNumber' not provided" Condition="'$(BuildNumber)' == ''" />

    <!-- Determine ASP.NET Package Version -->
    <PropertyGroup>
        <NoTimestampSource>$(COHERENCE_SIGNED_DROP_LOCATION)\Signed\Packages-NoTimeStamp</NoTimestampSource>
        <TimestampSource>$(COHERENCE_SIGNED_DROP_LOCATION)\Signed\Packages</TimestampSource>
    </PropertyGroup>

    <!-- Build the dotnet-archiver project -->
    <MSBuild Projects="$(ArchiverProject)" Targets="Restore" Properties="Configuration=$(Configuration)" />
    <MSBuild Projects="$(ArchiverProject)" Targets="Build" Properties="Configuration=$(Configuration)" />

    <!-- Run the actual target twice, once for timestamped packages, once for non-timestamped packages -->
    <!-- Here, we're re-invoking KoreBuild, but limiting it to a specific target. -->
    <!-- This won't rerun the whole build, but it ensures that the necessary MSBuild Tasks and Properties are initialized -->
    <MSBuild Projects="$(ProjectPath)" Targets="_BuildFallbackArchive" Properties="AspNetPackageVersion=$(TimestampVersion);PackageSource=$(TimestampSource);OutputPackageName=nuGetPackagesArchive.timestamped;ArchiverPath=$(ArchiverPath)" />
    <MSBuild Projects="$(ProjectPath)" Targets="_BuildFallbackArchive" Properties="AspNetPackageVersion=$(NoTimestampVersion);PackageSource=$(NoTimestampSource);OutputPackageName=nuGetPackagesArchive.notimestamp;ArchiverPath=$(ArchiverPath)" />

    <!-- Copy LZMA archives to Coherence-Signed drop location -->
    <PropertyGroup>
        <PublishDir Condition="'$(PublishShare)' != ''">$(PublishShare)\fallbackArchives</PublishDir>
    </PropertyGroup>
    <Copy SourceFiles="$(RepositoryRoot)artifacts\nuGetPackagesArchive.timestamped.lzma;$(RepositoryRoot)artifacts\nuGetPackagesArchive.notimestamp.lzma" DestinationFolder="$(PublishDir)" Condition="'$(PublishDir)' != ''" />
  </Target>

  <Target Name="AddManifestsToNupkg">
    <Error Text="COHERENCE_DROP_LOCATION is not specified. This requires a path like \\aspnetci\drops\Coherence\{branch}\{build-number}"
        Condition=" '$(COHERENCE_DROP_LOCATION)' == '' " />

    <ItemGroup>
      <MetaPackageNupkg Include="$(COHERENCE_DROP_LOCATION)\ship\Microsoft.AspNetCore.All.*.nupkg" />
      <ManifestFiles Include="$(ArtifactsDir)*.xml"/>
    </ItemGroup>

    <RemoveDir Directories="@(MetaPackageNupkg->'$(TempDir)%(Filename)')" />
    <Copy SourceFiles="@(MetaPackageNupkg)" DestinationFolder="$(ArtifactsDir)" />
    <UnzipArchive File="$(ArtifactsDir)%(MetaPackageNupkg.FileName)%(MetaPackageNupkg.Extension)" Destination="@(MetaPackageNupkg->'$(TempDir)%(Filename)')" />
    <Copy SourceFiles="@(ManifestFiles)" DestinationFolder="@(MetaPackageNupkg->'$(TempDir)%(Filename)\build\')" />

    <ItemGroup>
      <ArchiveFiles Include="$(TempDir)%(MetaPackageNupkg.Filename)\**\*" />
    </ItemGroup>

    <ZipArchive File="%(MetaPackageNupkg.FullPath)" SourceFiles="@(ArchiveFiles)" WorkingDirectory="@(MetaPackageNupkg->'$(TempDir)%(Filename)')" Overwrite="true" />
  </Target>

  <Target Name="BuildInstallers">
    <MSBuild Projects="$(ProjectPath)" Targets="GenerateDebs" />
  </Target>

  <Target Name="GenerateDebs">

    <Error Text="RUNTIMESTORE_SIGNEDARCHIVEDIRECTORY is not specified. This requires a path like \\aspnetci\drops\Coherence-Signed\{branch}\{build-number}" Condition="'$(RUNTIMESTORE_SIGNEDARCHIVEDIRECTORY)' == ''"/>

    <ItemGroup>
      <RuntimeStoreTimestampArchive>$(RUNTIMESTORE_SIGNEDARCHIVEDIRECTORY)Signed\PackageCache\Build.RS.linux-*</RuntimeStoreTimestampArchive>
      <RuntimeStoreNoTimestampArchive>$(RUNTIMESTORE_SIGNEDARCHIVEDIRECTORY)Signed\PackageCache\Build.RS.linux.*</RuntimeStoreNoTimestampArchive>
    </ItemGroup>

    <!-- Create layout: Aspnet runtime store -->
    <RemoveDir Directories="$(RuntimeStoreInstallerLayoutPackageRootTimestampDirectory)" />
    <MakeDir Directories="$(RuntimeStoreInstallerLayoutPackageRootTimestampDirectory)" />
    <Exec Command="tar -xzf @(RuntimeStoreTimestampArchive) -C $(RuntimeStoreInstallerLayoutPackageRootTimestampDirectory)" />
    <RemoveDir Directories="$(RuntimeStoreInstallerLayoutPackageRootNoTimestampDirectory)" />
    <MakeDir Directories="$(RuntimeStoreInstallerLayoutPackageRootNoTimestampDirectory)" />
    <Exec Command="tar -xzf @(RuntimeStoreNoTimestampArchive) -C $(RuntimeStoreInstallerLayoutPackageRootNoTimestampDirectory)" />

    <MSBuild Projects="$(ProjectPath)" Targets="BuildRuntimeStoreDeb" Properties="InstallerPlatform=debian" />
    <MSBuild Projects="$(ProjectPath)" Targets="BuildRuntimeStoreDeb" Properties="InstallerPlatform=ubuntu.14.04" />
    <MSBuild Projects="$(ProjectPath)" Targets="BuildRuntimeStoreDeb" Properties="InstallerPlatform=ubuntu.16.04" />
    <!--<MSBuild Projects="$(ProjectPath)" Targets="BuildRuntimeStoreDeb" Properties="InstallerPlatform=ubuntu.16.10" />-->
  </Target>

  <Target Name="BuildRuntimeStoreDeb">
    <PropertyGroup>
      <SdkDebianPackageTimestampName>aspnetcore-store-$(InstallerPlatform)-$(PACKAGE_CACHE_PLATFORM)</SdkDebianPackageTimestampName>
    </PropertyGroup>

    <!-- Create layout: Generate and Place debian_config.json -->
    <Copy
      SourceFiles="$(DebianConfigTemplateFile)"
      DestinationFiles="$(RuntimeStoreInstallerLayoutTimestampDirectory)debian_config.json"
      OverwriteReadOnlyFiles="True"
      SkipUnchangedFiles="False"
      UseHardlinksIfPossible="False" />
    <Copy
      SourceFiles="$(DebianConfigTemplateFile)"
      DestinationFiles="$(RuntimeStoreInstallerLayoutNoTimestampDirectory)debian_config.json"
      OverwriteReadOnlyFiles="True"
      SkipUnchangedFiles="False"
      UseHardlinksIfPossible="False" />

    <!-- Clear the output dir -->
    <RemoveDir Directories="$(RuntimeStoreInstallerOutputDirectory)" />
    <MakeDir Directories="$(RuntimeStoreInstallerOutputDirectory)" />

    <!-- Build Docker Image -->
    <Exec 
      Command="docker build --build-arg USER_ID=%24(id -u) -t docker-image-$(InstallerPlatform) $(InstallerPlatform)"
      WorkingDirectory="$(DockerDir)" />

    <!-- Build SDK Deb package -->
    <Exec Command="docker run 
      -v %24(pwd):/opt/code 
      -e DOTNET_SKIP_FIRST_TIME_EXPERIENCE=true
      -e RUNTIMESTORE_INSTALLERNAME=$(SdkDebianPackageTimestampName)
      docker-image-$(InstallerPlatform) 
      ./build.sh /t:RunDebTool" 
      WorkingDirectory="$(RepositoryRoot)" />

    <!-- Copy SDK package to output -->
    <ItemGroup>
      <GeneratedDebFiles Include="$(RuntimeStoreInstallerOutputDirectory)/*.deb" />
    </ItemGroup>

    <Error Text="@(GeneratedDebFiles->Count()) .deb files generated." Condition="'@(GeneratedDebFiles->Count())' != 2" />

    <Copy
      DestinationFolder="$(RuntimeStoreInstallerDirectory)"
      SourceFiles="@(GeneratedDebFiles)"
      OverwriteReadOnlyFiles="True"
      SkipUnchangedFiles="False"
      UseHardlinksIfPossible="False" /> 
  </Target>

  <Target Name="RunDebTool">
    <!-- Install dotnet-deb tool -->
    <Exec Command="dotnet restore" WorkingDirectory="$(DotnetDebToolDirectory)" />

    <!-- Build SDK Timestamp Deb package -->
    <Exec Command="
      dotnet deb-tool 
        -i $(RuntimeStoreInstallerLayoutTimestampDirectory) 
        -o $(RuntimeStoreInstallerOutputDirectory) 
        -n $(RUNTIMESTORE_INSTALLERNAME) 
        -v $(TimestampVersion)"
      WorkingDirectory="$(DotnetDebToolDirectory)" />

    <!-- Build SDK NoTimestamp Deb package -->
    <Exec Command="
      dotnet deb-tool 
        -i $(RuntimeStoreInstallerLayoutNoTimestampDirectory) 
        -o $(RuntimeStoreInstallerOutputDirectory) 
        -n $(RUNTIMESTORE_INSTALLERNAME) 
        -v $(NoTimestampVersion)"
      WorkingDirectory="$(DotnetDebToolDirectory)" />
  </Target>
</Project>
